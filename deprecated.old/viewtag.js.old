const fs = require('fs-extra');
const utf8 = require('utf8');
const { promisify } = require('util');

module.exports = {
	config: {
		name: 'viewtag',
		aliases: ['t', 'vt', 'vtag'],
		usage: '<tag name>',
		cooldown: 5,
		category: 'tag',
		permissions: 'None',
		args: true,
		description: 'View a tag',
	},
	execute: async (client, message, args) => {

		try {

			const tagname = args[0];

			if(!tagname) return message.channel.send('Tag requires a name');
			if(tagname.length > 30) return message.channel.send('Tag name cannot exceed 30 characters');

			let ntn = utf8.encode(tagname);
			ntn = utf8.decode(ntn);
			ntn = ntn.replace(/@everyone/g, '@\u200beveryone');
			ntn = ntn.replace(/@here/g, '@\u200bhere');
			ntn = ntn.replace(/<@&(.*?)>/g, '@\u200brole');
			ntn = ntn.replace(/'/g, '\'\'');
			ntn = ntn.replace(/"/g, '\'\'');

			const cst = 'SELECT tag,content,imageURL FROM tags WHERE tag=? AND guildID=?';
			const cgt = 'SELECT tag,content,imageURL FROM tags WHERE tag=? AND guildID IS NULL';

			client.conPool.getConnection(async (err, connection) => {
				console.info('[VIEW TAG] Connected to database');
				if(err) {
					connection.release();
					console.info('[VIEW TAG] Disconnected from database');
					console.error('[VIEW TAG] An error occured:');
					console.error(`[VIEW TAG] ${err.stack}`);
					return message.channel.send(`**:exclamation: An error occured:**\n\`\`\`${err}\`\`\``);
				}

				const checkServerTag = async () => {
					return new Promise((resolve, reject) => {
						connection.query(cst, [ntn, message.guild.id], async (error, rows) => {
							console.info(`[VIEW TAG] Checking for server tag: ${ntn}`);
							if(error) {
								console.error('[VIEW TAG An error occured:');
								console.error(`[VIEW TAG] ${error.stack}`);
								reject({ message: `**:exclamation: An error occured:**\n\`\`\`${err}\`\`\`` });
							}
							switch(rows[0]) {
							case undefined:
								console.info(`[VIEW TAG] No server tag found: ${ntn}`);
								checkGlobalTag()
									.then((success) => {
										resolve({ message: success.message, file: success.file });
									}).catch((fail) => {
										reject({ message: fail.message });
									});
								break;
							default:
								console.info(`[VIEW TAG] Server tag found: ${ntn}`);
								if(rows[0].imageURL === null) {
									console.success(`[VIEW TAG] Server tag sent: ${ntn}`);
									resolve({ message: rows[0].content });
								} else {
									const imagepath = rows[0].imageURL;
									const imagename = imagepath.substring(21, imagepath.length);
									const access = promisify(fs.access);
									await access(imagepath)
										.then(() => {
											console.success(`[VIEW TAG] Server tag sent: ${ntn}`);
											resolve({ message: rows[0].content, file: [{ attachment: imagepath, name: imagename }] });
										}).catch(() => {
											console.error(`[VIEW TAG] Server tag image ${imagepath} doesn't exist`);
											console.success(`[VIEW TAG] Server tag sent: ${ntn}`);
											resolve({ message: rows[0].content + ' *(image corrupted)*' });
										});
								}
							}
						});
					});
				};

				const checkGlobalTag = async () => {
					return new Promise((resolve, reject) => {
						connection.query(cgt, [ntn], async (error, rows) => {
							console.info(`[VIEW TAG] Checking for global tag: ${ntn}`);
							if(error) {
								console.error('[VIEW TAG An error occured:');
								console.error(`[VIEW TAG] ${error.stack}`);
								reject({ message: `**:exclamation: An error occured:**\n\`\`\`${err}\`\`\`` });
							}
							switch(rows[0]) {
							case undefined:
								console.info(`[VIEW TAG] No global tag found: ${ntn}`);
								resolve({ message: `:mag: Tag **${ntn}** not found` });
								break;
							default:
								console.info(`[VIEW TAG] Global tag found: ${ntn}`);
								if(rows[0].imageURL === null) {
									console.success(`[VIEW TAG] Global tag sent: ${ntn}`);
									resolve({ message: rows[0].content });
								} else {
									const imagepath = rows[0].imageURL;
									const imagename = imagepath.substring(21, imagepath.length);
									const access = promisify(fs.access);
									await access(imagepath)
										.then(() => {
											console.success(`[VIEW TAG] Global tag sent: ${ntn}`);
											resolve({ message: rows[0].content, file: [{ attachment: imagepath, name: imagename }] });
										}).catch(() => {
											console.error(`[VIEW TAG] Global tag image ${imagepath} doesn't exist`);
											console.success(`[VIEW TAG] Global tag sent: ${ntn}`);
											resolve({ message: rows[0].content + ' *(image corrupted)*' });
										});
								}
							}
						});
					});
				};

				return checkServerTag()
					.then((success) => {
						connection.release();
						console.info('[VIEW TAG] Disconnected from database');
						return message.channel.send(success.message, { files: success.file });
					}).catch((fail) => {
						connection.release();
						console.info('[VIEW TAG] Disconnected from database');
						return message.channel.send(fail.message);
					});
			});

		} catch(error) {
			console.error(error.stack);
			return message.channel.send(`**:exclamation: An error occured:** \`\`\`${error}\`\`\``);
		}
	},
};